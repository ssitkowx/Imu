#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "ImuSettings.hpp"

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <class DERIVED_TYPE>
class Imu
{
    friend DERIVED_TYPE;
    DERIVED_TYPE & derivedType = static_cast <DERIVED_TYPE &>(*this);

    public:
        uint16_t CalibTime   = 0;
        float    Sensitivity = 1;

        Imu (const uint16_t vCalibTime) : CalibTime (vCalibTime) {}
        ~Imu () = default;

        ImuSettings::Axes GetAxes           (void) { return derivedType.GetAxes           (); }
        void              Calibrate         (void) { derivedType       .Calibrate         (); }
        virtual bool      IsCalibInProgress (void) { return derivedType.IsCalibInProgress (); }

    private:
        void setSensitivity (const uint8_t vMask) { return derivedType.setSensitivity (vMask); }
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
