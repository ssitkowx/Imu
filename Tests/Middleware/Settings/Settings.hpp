#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "ImuSettings.hpp"

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// MACROS/DEFINITIONS ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#define SET_SETTINGS_INST(INSTANCE) Settings::SetInst (INSTANCE);

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class Settings
{
    public:
        class ImuSettings Imu;

        struct Timer
        {
            bool     IsOn;
            uint64_t Counter;

            void Count (void) { if (IsOn == true) { Counter++; } }
        };

        struct
        {
            Timer Imu;
        } Timer;

        static void       SetInst (Settings * const vInst) { inst = vInst; }
        static Settings * GetInst (void)                   { return inst;  }

    private:
        static inline Settings * inst;
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
